package main

import (
	"fmt"
	"sync"
)

/*
Написать программу, которая конкурентно рассчитает значение квадратов чисел
взятых из массива (2,4,6,8,10) и выведет их квадраты в stdout.
*/

// В этом решение происходит n раз из канала
func task2() {
	arr := [5]int{2, 4, 6, 8, 10}

	// инициализируется буфферизированный канал
	c := make(chan int, len(arr))

	for _, i := range arr {
		go func(i int) {
			// в канал отправляются квадрты чисел
			c <- i * i
		}(i)
	}

	// fmt ждет n раз данные из канала если i > n или вовсе не будет for, произайдет deadlock
	for i := 0; i < len(arr); i++ {
		fmt.Println(<-c)
	}
}

// В этом решение без канала выводится квадраты, а мейн ждет благодоря wg
func task2_2() {
	arr := [5]int{2, 4, 6, 8, 10}

	wg := new(sync.WaitGroup)

	for _, i := range arr {
		// добавляет 1 рутину в очередь
		wg.Add(1)
		go func(i int) {
			// после того как отроботает функция сообщает об этом
			defer wg.Done()
			fmt.Println(i * i)
		}(i)
	}

	// ожидает когда во всех функциях отработает wg.Done() и очередь освободится
	wg.Wait()
}
